def is_valid(state):
    m_left, c_left, m_right, c_right, boat = state
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if m_left < c_left and m_left > 0:
        return False
    if m_right < c_right and m_right > 0:
        return False
    return True

def get_successors(state):
    m_left, c_left, m_right, c_right, boat = state
    successors = []
    if boat == 'left':
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (m_left - m, c_left - c, m_right + m, c_right + c, 'right')
            if is_valid(new_state):
                successors.append(new_state)
    else:
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (m_left + m, c_left + c, m_right - m, c_right - c, 'left')
            if is_valid(new_state):
                successors.append(new_state)
    return successors

def missionaries_cannibals():
    from collections import deque
    start_state = (3, 3, 0, 0, 'left')
    goal_state = (0, 0, 3, 3, 'right')
    queue = deque([(start_state, [])])
    visited = set()
    visited.add(start_state)

    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path + [current_state]
        for successor in get_successors(current_state):
            if successor not in visited:
                visited.add(successor)
                queue.append((successor, path + [current_state]))

    return None

solution = missionaries_cannibals()
if solution:
    for state in solution:
        print(state)
else:
    print("No solution found")

