import heapq

class PuzzleState:
    def __init__(self, board, move=0, previous=None):
        self.board = board
        self.move = move
        self.previous = previous
        self.empty_pos = self.board.index(0)
        self.priority = self.move + self.manhattan_distance()

    def __lt__(self, other):
        return self.priority < other.priority

    def manhattan_distance(self):
        distance = 0
        for i in range(1, 9):
            xi, yi = divmod(self.board.index(i), 3)
            xg, yg = divmod(i - 1, 3)
            distance += abs(xi - xg) + abs(yi - yg)
        return distance

    def get_neighbors(self):
        neighbors = []
        empty_row, empty_col = divmod(self.empty_pos, 3)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dr, dc in directions:
            new_row, new_col = empty_row + dr, empty_col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_pos = new_row * 3 + new_col
                new_board = self.board[:]
                new_board[self.empty_pos], new_board[new_pos] = new_board[new_pos], new_board[self.empty_pos]
                neighbors.append(PuzzleState(new_board, self.move + 1, self))
        return neighbors

    def __str__(self):
        return '\n'.join([' '.join(map(str, self.board[i:i + 3])) for i in range(0, 9, 3)])

def a_star(start, goal):
    open_set = []
    heapq.heappush(open_set, PuzzleState(start))
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)
        if current_state.board == goal:
            return current_state
        closed_set.add(tuple(current_state.board))

        for neighbor in current_state.get_neighbors():
            if tuple(neighbor.board) not in closed_set:
                heapq.heappush(open_set, neighbor)

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state)
        state = state.previous
    return path[::-1]

if __name__ == "__main__":
    start = [1, 2, 3, 4, 5, 6, 7, 8, 0]  # Start state
    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]  # Goal state

    result = a_star(start, goal)
    if result:
        path = reconstruct_path(result)
        for step in path:
            print(step)
            print()
    else:
        print("No solution found")
